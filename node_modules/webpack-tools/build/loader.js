'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _globToRegexp = require('./glob-to-regexp');

var _globToRegexp2 = _interopRequireDefault(_globToRegexp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Regexable = function Regexable(input) {
  return input instanceof RegExp || typeof input === 'string';
};

var loader = function loader(request) {
  var query = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var suffix = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

  if (!(typeof request === 'string')) {
    throw new TypeError('Value of argument "request" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(request));
  }

  // always suffix the loader, unless we do not want to
  var loader = !/-loader$/.test(request) && suffix ? request + '-loader' : request;
  var qstring = (0, _keys2['default'])(query).length > 0 ? '?' + (0, _stringify2['default'])(query) : '';

  return '' + loader + qstring;
};

var mktest = function mktest(thing) {
  function _ref2(_id2) {
    if (!(_id2 instanceof RegExp)) {
      throw new TypeError('Function return value violates contract.\n\nExpected:\nRegExp\n\nGot:\n' + _inspect(_id2));
    }

    return _id2;
  }

  if (!Regexable(thing)) {
    throw new TypeError('Value of argument "thing" violates contract.\n\nExpected:\nRegExp | string\n\nGot:\n' + _inspect(thing));
  }

  if (thing instanceof RegExp) {
    return _ref2(thing);
  } else if (typeof thing === 'string') {
    return _ref2((0, _globToRegexp2.default)(thing, { extended: true }));
  } else {
    return _ref2(thing);
  }
};

var Loader = function () {

  // make a new loader

  function Loader(regex) {
    (0, _classCallCheck3.default)(this, Loader);
    this.loader = '';

    this.test = mktest(regex);
  }

  // add includes clause

  (0, _createClass3.default)(Loader, [{
    key: 'includes',
    value: function includes(pattern) {
      function _ref3(_id3) {
        if (!(_id3 instanceof Loader)) {
          throw new TypeError('Function return value violates contract.\n\nExpected:\nLoader\n\nGot:\n' + _inspect(_id3));
        }

        return _id3;
      }

      if (!Regexable(pattern)) {
        throw new TypeError('Value of argument "pattern" violates contract.\n\nExpected:\nRegExp | string\n\nGot:\n' + _inspect(pattern));
      }

      var other = this.clone();
      other.include = [mktest(pattern)].concat((0, _toConsumableArray3.default)(this.include || []));
      return _ref3(other);
    }

    // add excludes clause

  }, {
    key: 'excludes',
    value: function excludes(pattern) {
      function _ref4(_id4) {
        if (!(_id4 instanceof Loader)) {
          throw new TypeError('Function return value violates contract.\n\nExpected:\nLoader\n\nGot:\n' + _inspect(_id4));
        }

        return _id4;
      }

      if (!Regexable(pattern)) {
        throw new TypeError('Value of argument "pattern" violates contract.\n\nExpected:\nRegExp | string\n\nGot:\n' + _inspect(pattern));
      }

      var other = this.clone();
      other.exclude = [mktest(pattern)].concat((0, _toConsumableArray3.default)(this.exclude || []));
      return _ref4(other);
    }

    // clone a loader

  }, {
    key: 'clone',
    value: function clone() {
      var other = new Loader(this.test);
      (0, _assign2.default)(other, this);
      return other;
    }

    // add a loader

  }, {
    key: 'load',
    value: function load(name, options, suffix) {
      function _ref6(_id6) {
        if (!(_id6 instanceof Loader)) {
          throw new TypeError('Function return value violates contract.\n\nExpected:\nLoader\n\nGot:\n' + _inspect(_id6));
        }

        return _id6;
      }

      if (!(typeof name === 'string')) {
        throw new TypeError('Value of argument "name" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(name));
      }

      if (!(options == null || options instanceof Object)) {
        throw new TypeError('Value of argument "options" violates contract.\n\nExpected:\n?Object\n\nGot:\n' + _inspect(options));
      }

      if (!(suffix == null || typeof suffix === 'boolean')) {
        throw new TypeError('Value of argument "suffix" violates contract.\n\nExpected:\n?bool\n\nGot:\n' + _inspect(suffix));
      }

      var other = this.clone();
      other.loader = (loader(name, options, suffix) + '!' + this.loader).replace(/\!$/, '');
      return _ref6(other);
    }

    // add a loader conditionally

  }, {
    key: 'when',
    value: function when(condition, loader, options, suffix) {
      function _ref7(_id7) {
        if (!(_id7 instanceof Loader)) {
          throw new TypeError('Function return value violates contract.\n\nExpected:\nLoader\n\nGot:\n' + _inspect(_id7));
        }

        return _id7;
      }

      if (!(typeof loader === 'string')) {
        throw new TypeError('Value of argument "loader" violates contract.\n\nExpected:\nstring\n\nGot:\n' + _inspect(loader));
      }

      if (!(options == null || options instanceof Object)) {
        throw new TypeError('Value of argument "options" violates contract.\n\nExpected:\n?Object\n\nGot:\n' + _inspect(options));
      }

      if (!(suffix == null || typeof suffix === 'boolean')) {
        throw new TypeError('Value of argument "suffix" violates contract.\n\nExpected:\n?bool\n\nGot:\n' + _inspect(suffix));
      }

      if (condition) {
        return _ref7(this.load(loader, options, suffix));
      } else {
        return _ref7(this.clone());
      }
    }
  }]);
  return Loader;
}();

// Create a new loader from a glob or regex

var test = function test(glob) {
  if (!Regexable(glob)) {
    throw new TypeError('Value of argument "glob" violates contract.\n\nExpected:\nRegExp | string\n\nGot:\n' + _inspect(glob));
  }

  return new Loader(glob);
};

exports.default = test;

function _inspect(input) {
  if (input === null) {
    return 'null';
  } else if (input === undefined) {
    return 'void';
  } else if (typeof input === 'string' || typeof input === 'number' || typeof input === 'boolean') {
    return typeof input === 'undefined' ? 'undefined' : (0, _typeof3['default'])(input);
  } else if (Array.isArray(input)) {
    if (input.length > 0) {
      var first = _inspect(input[0]);

      if (input.every(function (item) {
        return _inspect(item) === first;
      })) {
        return first.trim() + '[]';
      } else {
        return '[' + input.map(_inspect).join(', ') + ']';
      }
    } else {
      return 'Array';
    }
  } else {
    var keys = (0, _keys2['default'])(input);

    if (!keys.length) {
      if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
        return input.constructor.name;
      } else {
        return 'Object';
      }
    }

    var entries = keys.map(function (key) {
      return (/^([A-Z_$][A-Z0-9_$]*)$/i.test(key) ? key : (0, _stringify2['default'])(key)) + ': ' + _inspect(input[key]) + ';';
    }).join('\n  ');

    if (input.constructor && input.constructor.name && input.constructor.name !== 'Object') {
      return input.constructor.name + ' {\n  ' + entries + '\n}';
    } else {
      return '{ ' + entries + '\n}';
    }
  }
}
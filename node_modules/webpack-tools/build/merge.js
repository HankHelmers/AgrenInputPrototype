"use strict";

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require("babel-runtime/helpers/extends");

var _extends4 = _interopRequireDefault(_extends3);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = function () {
  for (var _len = arguments.length, configs = Array(_len), _key = 0; _key < _len; _key++) {
    configs[_key] = arguments[_key];
  }

  return configs.reduce(function (prev, next) {
    return merge(prev, next);
  }, {});
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// merge two objects recurivly (immutably)
var merge = function merge(A, B) {
  if (A instanceof Array && B instanceof Array) {
    // merge arrays by concatting them
    return [].concat((0, _toConsumableArray3.default)(A), (0, _toConsumableArray3.default)(B));
  } else if (A instanceof Object && B instanceof Object) {
    // merge every key of an object recursivly
    return (0, _keys2.default)(A).reduce(function (prev, key) {
      return (0, _extends4.default)({}, prev, (0, _defineProperty3.default)({}, key, merge(A[key], B[key])));
    }, B);
  } else if (B !== undefined) {
    // use B if given
    return B;
  } else {
    // fall back to A
    return A;
  }
};

// merge several objects
;